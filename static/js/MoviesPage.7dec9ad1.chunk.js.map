{"version":3,"sources":["API/fetchMovies.jsx","components/styles/Cast.module.css","components/styles/Reviews.module.css","components/styles/MovieDetailsPage.module.css","components/views/CastView.jsx","components/views/ReviewsView.jsx","components/views/MovieDetailsPageView.jsx","components/styles/MoviesPage.module.css","components/views/MoviesPageView.jsx"],"names":["axios","defaults","baseURL","params","api_key","fetchData","a","url","query","response","console","log","data","Promise","reject","Error","status","fetchTrendingMovies","fetchMovieById","movieId","fetchMovieByTitle","fetchMovieCredits","fetchMovieReviews","module","exports","CastView","props","useState","credits","setCredits","error","setError","useParams","className","ref","href","onClick","e","preventDefault","then","r","catch","message","container","listTitle","list","cast","map","idx","id","name","profile_path","character","item","thumb","alt","src","crew","job","ReviewsView","reviews","setReviews","rule","length","results","link","author","content","created_at","MovieDetailsPageView","movie","setMovie","location","useLocation","history","useHistory","useEffect","type","button","push","state","from","poster_path","description","title","popularity","original_language","genres","result","genre","join","getGenre","release_date","overview","MoviesPageView","setQuery","movies","setMovies","useRouteMatch","path","search","slice","onSubmit","textInput","target","value","input","placeholder","to","pathname","backdrop_path"],"mappings":"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","file":"static/js/MoviesPage.7dec9ad1.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https:api.themoviedb.org/3/\";\nconst API_KEY = \"d2531e14d49c44f419dbab0e50f36d2c\";\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nconst fetchData = async (url = \"\", query) => {\n  const response = await axios(url, { params: { query } });\n  console.log(response);\n  return (response.status = 200 ? await response.data : Promise.reject(Error));\n};\n\nexport function fetchTrendingMovies() {\n  return fetchData(\"trending/all/day\");\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchData(`movie/${movieId}`);\n}\n\nexport function fetchMovieByTitle(query) {\n  return fetchData(\"search/movie\", query);\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchData(`movie/${movieId}/credits`);\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchData(`movie/${movieId}/reviews`);\n}\n\n// API_KEY \"d2531e14d49c44f419dbab0e50f36d2c\"\n\n//https:developers.themoviedb.org/3/trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n\n//https:developers.themoviedb.org/3/search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\n\n//https:developers.themoviedb.org/3/movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\n\n//https:developers.themoviedb.org/3/movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\n\n//https:developers.themoviedb.org/3/movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Cast_list__1C31B\",\"item\":\"Cast_item__qBoAz\",\"thumb\":\"Cast_thumb__3yLDq\",\"container\":\"Cast_container__21vPH\",\"listTitle\":\"Cast_listTitle__1NmC_\",\"ref\":\"Cast_ref__2kw5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Reviews_link__2r7us\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MovieDetailsPage_container__2YGln\",\"thumb\":\"MovieDetailsPage_thumb__3a8oC\",\"description\":\"MovieDetailsPage_description__2T0CP\",\"button\":\"MovieDetailsPage_button__SQvNV\",\"list\":\"MovieDetailsPage_list__exVtr\"};","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCredits } from \"../../API/fetchMovies\";\nimport {\n  list,\n  item,\n  container,\n  listTitle,\n  ref,\n  thumb,\n} from \"../styles/Cast.module.css\";\n\nfunction CastView(props) {\n  const [credits, setCredits] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const handleClick = (e) => {\n    e.preventDefault();\n\n    if (credits) {\n      return setCredits(null);\n    }\n\n    fetchMovieCredits(movieId)\n      .then((r) => setCredits(r))\n      .catch((error) => setError(error.message));\n  };\n\n  return (\n    <div>\n      {error && (\n        <div>\n          <p>Credits not found. {error}</p>\n        </div>\n      )}\n\n      <a className={ref} href=\"/\" onClick={handleClick}>\n        Cast\n      </a>\n\n      {credits && (\n        <div className={container}>\n          <h3 className={listTitle}> Cast:</h3>\n          <ul className={list}>\n            {credits.cast.map(({ id, name, profile_path, character }, idx) => (\n              <li key={idx} className={item}>\n                <div className={thumb}>\n                  <img\n                    alt={name}\n                    src={`https:image.tmdb.org/t/p/w500${profile_path}`}\n                  />\n                </div>\n                <p>\n                  <span>Name:</span> {name}\n                </p>\n                <p>\n                  <span>Character:</span> {character}\n                </p>\n              </li>\n            ))}\n          </ul>\n\n          <h3 className={listTitle}>Crew:</h3>\n          <ul className={list}>\n            {credits.crew.map(({ id, name, profile_path, job }, idx) => (\n              <li key={idx} className={item}>\n                <div className={thumb}>\n                  <img\n                    alt={name}\n                    src={`https:image.tmdb.org/t/p/w500${profile_path}`}\n                  />\n                </div>\n                <p>\n                  <span>Name:</span> {name}\n                </p>\n                <p>\n                  <span>Job:</span> {job}\n                </p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CastView;\n\n// useEffect(() => {\n//     if (movieId) {\n//         fetchMovieCredits(movieId)\n//             .then(r => setCredits(r))\n//             .catch(error => setError(error.message))\n//     }\n// }, [movieId]);\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieReviews } from \"../../API/fetchMovies\";\nimport { link } from \"../styles/Reviews.module.css\";\n\nfunction ReviewsView(props) {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const handleClick = (e) => {\n    e.preventDefault();\n\n    if (reviews) {\n      return setReviews(null);\n    }\n\n    fetchMovieReviews(movieId)\n      .then((r) => setReviews(r.results))\n      .catch((error) => setError(error.message));\n  };\n\n  const rule = reviews && reviews.length === 0;\n\n  return (\n    <div>\n      {error && (\n        <div>\n          <p>Reviews not found. {error}</p>\n        </div>\n      )}\n\n      <a href=\"/\" onClick={handleClick} className={link}>\n        Reviews\n      </a>\n\n      {rule && (\n        <div>\n          <p>There are no reviews for this movie</p>\n        </div>\n      )}\n\n      {reviews && (\n        <ul>\n          {reviews.map(({ author, content, created_at }, idx) => (\n            <li key={idx}>\n              <p>\n                <span>Author:</span> {author}\n              </p>\n              <p>\n                <span>Created:</span> {created_at}\n              </p>\n              <p>\n                <span>Review:</span> {content}\n              </p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default ReviewsView;\n\n// useEffect(() => {\n//     if (movieId) {\n//         fetchMovieReviews(movieId)\n//             .then(r => setReviews(r.results))\n//             .catch(error => setError(error.message))\n//     }\n// }, [movieId]);\n","import React, { useState, useEffect } from \"react\";\nimport { fetchMovieById } from \"../../API/fetchMovies\";\nimport { useParams, useLocation, useHistory } from \"react-router-dom\";\n// import Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport CastView from \"./CastView\";\nimport ReviewsView from \"./ReviewsView\";\nimport {\n  container,\n  thumb,\n  description,\n  button,\n  list,\n} from \"../styles/MovieDetailsPage.module.css\";\n\nfunction MovieDetailsPageView() {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (movieId) {\n      fetchMovieById(movieId)\n        .then((r) => setMovie(r))\n        .catch((error) => setError(error.message));\n    }\n  }, [movieId]);\n\n  const getGenre = (genres) => {\n    const result = [];\n    genres.map((genre) => result.push(genre.name));\n    return result.join(\", \");\n  };\n\n  const onGoBack = () => {\n    history.push(location.state ? location.state.from : null);\n  };\n\n  return (\n    <div>\n      {error && (\n        <div>\n          <p>This movie not found. {error}</p>\n        </div>\n      )}\n\n      {movie && (\n        <>\n          <button type=\"button\" className={button} onClick={onGoBack}>\n            Go back\n          </button>\n          <div className={container}>\n            <div className={thumb}>\n              <img\n                src={`https:image.tmdb.org/t/p/w500${movie.poster_path}`}\n                alt=\"Movie cover\"\n              />\n            </div>\n            <div className={description}>\n              <h2>{movie.title}</h2>\n              <p>\n                <span>Popularity:</span> {movie.popularity}\n              </p>\n              <p>\n                <span>Original language:</span> {movie.original_language}\n              </p>\n              <p>\n                <span>Genres:</span> {getGenre(movie.genres)}\n              </p>\n              <p>\n                <span>Release date:</span> {movie.release_date}\n              </p>\n              <p>\n                <span>Overview:</span> {movie.overview}\n              </p>\n            </div>\n          </div>\n\n          <hr />\n\n          <ul className={list}>\n            <li>\n              <ReviewsView />\n            </li>\n            <hr />\n            <li>\n              <CastView />\n            </li>\n          </ul>\n          <hr />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default MovieDetailsPageView;\n\n//https:image.tmdb.org/t/p/w500\n\n// const CastView = lazy(() => import('./CastView' /*webpackChunkName: 'CastView' */))\n// const ReviewsView = lazy(() => import('./ReviewsView' /*webpackChunkName: 'ReviewsView' */))\n\n/* <ul>\n            <li>\n                <NavLink\n                to = {`${url}/cast`}\n                className=\"\"\n                >\n                    CastView\n                </NavLink>\n            </li>\n            <li>\n                <NavLink\n                to={`${url}/reviews`}\n                className=\"\"\n                >\n                    ReviewsView\n                </NavLink>\n            </li>\n        </ul> */\n\n/* <Suspense fallback={<Loader\n                    color=\"#00BFFF\"\n                    type=\"ThreeDots\"\n                    timeout={3000}\n                    height={150}\n                    width={150} />}>    \n                <Route path={`${path}/cast`}>\n                    <CastView/>\n                </Route>\n\n                <Route path={`${path}/reviews`}>\n                    <ReviewsView/>\n                </Route>\n            </Suspense>  */\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoviesPage_container__2lhux\",\"list\":\"MoviesPage_list__19kr9\",\"thumb\":\"MoviesPage_thumb__221_I\",\"item\":\"MoviesPage_item__dZn96\",\"input\":\"MoviesPage_input__wHz_i\",\"button\":\"MoviesPage_button__2U_PO\"};","import React, { useState, useEffect } from \"react\";\nimport { fetchMovieByTitle } from \"../../API/fetchMovies\";\nimport MovieDetailsPageView from \"./MovieDetailsPageView\";\nimport {\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation,\n} from \"react-router-dom\";\nimport {\n  container,\n  list,\n  item,\n  input,\n  button,\n  thumb,\n} from \"../styles/MoviesPage.module.css\";\n\nfunction MoviesPageView() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState(null);\n  const { path, url } = useRouteMatch();\n  const { movieId } = useParams();\n  const location = useLocation();\n  const search = location.search.slice(1);\n\n  useEffect(() => {\n    if (query) {\n      fetchMovieByTitle(query)\n        .then((r) => setMovies(r.results))\n        .catch((error) => setError(error.message));\n    }\n  }, [query]);\n\n  useEffect(() => {\n    if (!query && location.search !== \"\") {\n      setQuery(search);\n    }\n  }, [location.search, query, search]);\n\n  // useEffect(() => {\n  //     if (movieId) {\n  //         setMovies(null)\n  //     }\n  // }, [movieId])\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { textInput } = e.target;\n    setQuery(textInput.value);\n    textInput.value = \"\";\n  };\n\n  return (\n    <>\n      {!movieId && (\n        <div className={container}>\n          <p>\n            <span>Here you can find movie by title</span>\n          </p>\n\n          <form onSubmit={handleSubmit}>\n            <label>\n              <input\n                className={input}\n                type=\"text\"\n                id=\"textInput\"\n                placeholder=\"Enter movie title\"\n              />\n            </label>\n            <button className={button} type=\"submit\">\n              Search\n            </button>\n          </form>\n        </div>\n      )}\n\n      {error && (\n        <div>\n          <p>Something went wrong. {error}</p>\n        </div>\n      )}\n\n      {movies && (\n        <ul className={list}>\n          {movies.map((movie) => (\n            <Link\n              key={movie.id}\n              to={{\n                pathname: `${url}/${movie.id}`,\n                state: {\n                  from: {\n                    pathname: location.pathname,\n                    search: query,\n                  },\n                },\n              }}\n            >\n              <li className={item}>\n                <p>{movie.name || movie.title}</p>\n                <div className={thumb}>\n                  <img\n                    alt=\"Movie cover\"\n                    src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}\n                  />\n                </div>\n              </li>\n            </Link>\n          ))}\n        </ul>\n      )}\n\n      {movieId && (\n        <Route path={path}>\n          <MovieDetailsPageView />\n        </Route>\n      )}\n    </>\n  );\n}\n\nexport default MoviesPageView;\n"],"sourceRoot":""}