{"version":3,"sources":["API/fetchMovies.jsx","components/styles/Cast.module.css","components/styles/Reviews.module.css","components/styles/MovieDetailsPage.module.css","components/views/CastView.jsx","components/views/ReviewsView.jsx","components/views/MovieDetailsPageView.jsx","components/styles/MoviesPage.module.css","components/views/MoviesPageView.jsx"],"names":["axios","defaults","baseURL","params","api_key","fetchData","a","url","query","response","data","Promise","reject","Error","status","fetchTrendingMovies","fetchMovieById","movieId","fetchMovieByTitle","fetchMovieCredits","fetchMovieReviews","module","exports","CastView","props","useState","credits","setCredits","error","setError","useParams","className","ref","href","onClick","e","preventDefault","then","r","catch","message","container","listTitle","list","cast","map","idx","id","name","profile_path","character","item","thumb","alt","src","crew","job","ReviewsView","reviews","setReviews","rule","length","results","link","author","content","created_at","MovieDetailsPageView","movie","setMovie","location","useLocation","history","useHistory","useEffect","type","button","push","state","from","poster_path","description","title","popularity","original_language","genres","result","genre","join","getGenre","release_date","overview","MoviesPageView","setQuery","movies","setMovies","useRouteMatch","path","search","slice","onSubmit","textInput","target","value","input","placeholder","to","pathname","backdrop_path"],"mappings":"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","file":"static/js/MoviesPage.7ec09249.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = \"https:api.themoviedb.org/3/\";\r\nconst API_KEY = \"d2531e14d49c44f419dbab0e50f36d2c\";\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n};\r\n\r\nconst fetchData = async (url='', query) => {\r\n    const response = await axios(url, { params: { query } });\r\n    // console.log(response);\r\n    return response.status = 200\r\n        ? await response.data\r\n        : Promise.reject( Error)\r\n};\r\n\r\nexport function fetchTrendingMovies() {\r\n    return fetchData('trending/all/day')\r\n}\r\n\r\nexport function fetchMovieById(movieId) {\r\n    return fetchData(`movie/${movieId}`)\r\n}\r\n\r\nexport function fetchMovieByTitle(query) {\r\n    return fetchData('search/movie', query)\r\n}\r\n\r\nexport function fetchMovieCredits(movieId) {\r\n    return fetchData(`movie/${movieId}/credits`)\r\n}\r\n\r\nexport function fetchMovieReviews(movieId) {\r\n    return fetchData(`movie/${movieId}/reviews`)\r\n}\r\n\r\n\r\n// API_KEY \"d2531e14d49c44f419dbab0e50f36d2c\"\r\n\r\n//https:developers.themoviedb.org/3/trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\r\n\r\n//https:developers.themoviedb.org/3/search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\r\n\r\n//https:developers.themoviedb.org/3/movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\r\n\r\n//https:developers.themoviedb.org/3/movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\r\n\r\n//https:developers.themoviedb.org/3/movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Cast_list__1C31B\",\"item\":\"Cast_item__qBoAz\",\"thumb\":\"Cast_thumb__3yLDq\",\"container\":\"Cast_container__21vPH\",\"listTitle\":\"Cast_listTitle__1NmC_\",\"ref\":\"Cast_ref__2kw5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Reviews_link__2r7us\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MovieDetailsPage_container__2YGln\",\"thumb\":\"MovieDetailsPage_thumb__3a8oC\",\"description\":\"MovieDetailsPage_description__2T0CP\",\"button\":\"MovieDetailsPage_button__SQvNV\",\"list\":\"MovieDetailsPage_list__exVtr\"};","import React, {useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovieCredits } from '../../API/fetchMovies';\r\nimport { list, item, container, listTitle, ref, thumb} from \"../styles/Cast.module.css\";\r\n\r\nfunction CastView(props) {\r\n    const [credits, setCredits] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const { movieId } = useParams();\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault()\r\n\r\n            if (credits) {\r\n                return setCredits(null)\r\n            }\r\n\r\n        fetchMovieCredits(movieId)\r\n        .then(r => setCredits(r))\r\n        .catch(error => setError(error.message))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {error && <div><p>Credits not found. {error}</p></div>}\r\n\r\n            <a className={ref} href=\"/\" onClick={handleClick}>\r\n                Cast\r\n            </a>\r\n\r\n            {credits && \r\n                <div className={container}>\r\n                <h3 className={listTitle}> Cast:</h3>\r\n                    <ul className={list}>\r\n                        {credits.cast.map(\r\n                            ({ id, name, profile_path, character }, idx) =>\r\n                                <li key={idx} className ={item}>\r\n                                    <div className={thumb}>\r\n                                        <img alt={name} \r\n                                        src={`https:image.tmdb.org/t/p/w500${profile_path}`}\r\n                                    />\r\n                                    </div>\r\n                                    <p><span>Name:</span>  {name}</p>\r\n                                    <p><span>Character:</span>  {character}</p>\r\n                                </li>\r\n                            )}\r\n                    </ul>\r\n\r\n                    <h3 className={listTitle}>Crew:</h3>               \r\n                    <ul className={list}>\r\n                        {credits.crew.map(\r\n                            ({ id, name, profile_path, job }, idx) =>\r\n                                <li key={idx} className ={item}>\r\n                                    <div className={thumb}>\r\n                                        <img  alt={name} \r\n                                        src={`https:image.tmdb.org/t/p/w500${profile_path}`}\r\n                                    />\r\n                                    </div>\r\n                                    <p><span>Name:</span>  {name}</p>\r\n                                    <p><span>Job:</span>  {job}</p>\r\n                                </li>\r\n                            )}\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CastView;\r\n\r\n\r\n  // useEffect(() => {\r\n    //     if (movieId) {\r\n    //         fetchMovieCredits(movieId)\r\n    //             .then(r => setCredits(r))\r\n    //             .catch(error => setError(error.message))\r\n    //     }\r\n    // }, [movieId]);","import React, { useState} from 'react';\r\nimport { useParams} from 'react-router-dom';\r\nimport { fetchMovieReviews } from '../../API/fetchMovies';\r\nimport {link} from '../styles/Reviews.module.css';\r\n\r\n\r\nfunction ReviewsView(props) {\r\n    const [reviews, setReviews] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const { movieId } = useParams();\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault()\r\n\r\n            if (reviews) {\r\n                return setReviews(null)\r\n            }\r\n\r\n        fetchMovieReviews(movieId)\r\n        .then(r => setReviews(r.results))\r\n        .catch(error => setError(error.message))\r\n    }\r\n\r\n    const rule = reviews && reviews.length === 0;\r\n\r\n    return (\r\n        <div>\r\n            {error && <div><p>Reviews not found. {error}</p></div>}\r\n            \r\n            <a href='/' onClick={handleClick} className={link}>\r\n                Reviews\r\n            </a>\r\n            \r\n            {rule && <div><p>There are no reviews for this movie</p></div> }\r\n                \r\n\r\n            {reviews &&\r\n                <ul>\r\n                {reviews.map(\r\n                    ({ author, content, created_at }, idx) => (\r\n                        <li key={idx}>\r\n                            <p><span>Author:</span> {author}</p>\r\n                            <p><span>Created:</span> {created_at}</p>\r\n                            <p><span>Review:</span> {content}</p>\r\n                        </li>\r\n                    ))}\r\n            </ul>\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReviewsView;\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (movieId) {\r\n    //         fetchMovieReviews(movieId)\r\n    //             .then(r => setReviews(r.results))\r\n    //             .catch(error => setError(error.message))\r\n    //     }\r\n    // }, [movieId]);","import React, { useState, useEffect} from 'react';\r\nimport { fetchMovieById } from '../../API/fetchMovies';\r\nimport { useParams, useLocation, useHistory } from 'react-router-dom';\r\n// import Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport CastView from './CastView';\r\nimport ReviewsView from \"./ReviewsView\";\r\nimport {container, thumb, description, button, list} from '../styles/MovieDetailsPage.module.css'\r\n\r\nfunction MovieDetailsPageView() {\r\n    const [movie, setMovie] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const { movieId } = useParams();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (movieId) {\r\n            fetchMovieById(movieId)\r\n                .then(r => setMovie(r))\r\n                .catch(error => setError(error.message))\r\n        }\r\n    }, [movieId]);\r\n\r\n    const getGenre = (genres) => {\r\n        const result = [];\r\n        genres.map(genre => result.push(genre.name))\r\n        return result.join(', ');\r\n    };\r\n\r\n    const onGoBack = () => {\r\n        history.push(location.state ? location.state.from : null);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            {error && <div><p>This movie not found. { error }</p></div > }\r\n\r\n            {movie &&\r\n                <>\r\n                    <button type=\"button\" className={button} onClick={onGoBack}>\r\n                        Go back\r\n                    </button>\r\n                    <div className={container}>\r\n                        <div className={thumb}>\r\n                            <img src={`https:image.tmdb.org/t/p/w500${movie.poster_path}`} alt=\"Movie cover\"/>\r\n                        </div>\r\n                        <div className={description}>\r\n                            <h2>{movie.title}</h2>\r\n                            <p><span>Popularity:</span> {movie.popularity}</p>\r\n                            <p><span>Original language:</span> {movie.original_language}</p>\r\n                            <p><span>Genres:</span> {getGenre(movie.genres)}</p>\r\n                            <p><span>Release date:</span> {movie.release_date}</p>\r\n                            <p><span>Overview:</span>   {movie.overview}</p>\r\n                        </div>\r\n                    </div>          \r\n\r\n                    <hr />\r\n\r\n                    <ul className={list}>\r\n                        <li><ReviewsView /></li>\r\n                        <hr/>\r\n                        <li><CastView /></li>\r\n                    </ul>\r\n                    <hr/>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieDetailsPageView;\r\n\r\n//https:image.tmdb.org/t/p/w500\r\n\r\n\r\n\r\n\r\n// const CastView = lazy(() => import('./CastView' /*webpackChunkName: 'CastView' */))\r\n// const ReviewsView = lazy(() => import('./ReviewsView' /*webpackChunkName: 'ReviewsView' */))\r\n\r\n\r\n        /* <ul>\r\n            <li>\r\n                <NavLink\r\n                to = {`${url}/cast`}\r\n                className=\"\"\r\n                >\r\n                    CastView\r\n                </NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink\r\n                to={`${url}/reviews`}\r\n                className=\"\"\r\n                >\r\n                    ReviewsView\r\n                </NavLink>\r\n            </li>\r\n        </ul> */\r\n\r\n\r\n        \r\n            /* <Suspense fallback={<Loader\r\n                    color=\"#00BFFF\"\r\n                    type=\"ThreeDots\"\r\n                    timeout={3000}\r\n                    height={150}\r\n                    width={150} />}>    \r\n                <Route path={`${path}/cast`}>\r\n                    <CastView/>\r\n                </Route>\r\n\r\n                <Route path={`${path}/reviews`}>\r\n                    <ReviewsView/>\r\n                </Route>\r\n            </Suspense>  */\r\n    ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoviesPage_container__2lhux\",\"list\":\"MoviesPage_list__19kr9\",\"thumb\":\"MoviesPage_thumb__221_I\",\"item\":\"MoviesPage_item__dZn96\",\"input\":\"MoviesPage_input__wHz_i\",\"button\":\"MoviesPage_button__2U_PO\"};","import React, { useState, useEffect} from 'react';\r\nimport {fetchMovieByTitle} from '../../API/fetchMovies';\r\nimport MovieDetailsPageView from './MovieDetailsPageView';\r\nimport { Route, Link, useRouteMatch, useParams, useLocation } from 'react-router-dom';\r\nimport {container, list, item, input, button, thumb} from \"../styles/MoviesPage.module.css\";\r\n\r\n\r\nfunction MoviesPageView() {\r\n    const [query, setQuery] = useState('')\r\n    const [movies, setMovies] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const {path, url} = useRouteMatch();\r\n    const { movieId } = useParams();\r\n    const location = useLocation()\r\n    const search = location.search.slice(1);\r\n\r\n    useEffect(() => {\r\n        if (query) {\r\n            fetchMovieByTitle(query)\r\n                .then(r =>setMovies(r.results))\r\n                .catch(error => setError(error.message))            \r\n        }\r\n    }, [query])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!query && location.search !== \"\") {\r\n            setQuery(search)\r\n        }\r\n    }, [location.search, query, search])\r\n\r\n    // useEffect(() => {\r\n    //     if (movieId) {\r\n    //         setMovies(null)\r\n    //     }\r\n    // }, [movieId])\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { textInput } = e.target;\r\n        setQuery(textInput.value);\r\n        textInput.value = \"\";    \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {!movieId &&\r\n                <div className={container}>\r\n            <p><span>Here you can find movie by title</span></p>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    <input className={input} type=\"text\"\r\n                        id='textInput'\r\n                        placeholder=\"Enter movie title\"\r\n                    />\r\n                </label>\r\n                <button className={button} type=\"submit\">Search</button>\r\n            </form>\r\n            </div>\r\n            }\r\n\r\n            {error && <div><p>Something went wrong. {error}</p></div>  }\r\n\r\n            {movies &&\r\n                <ul className={list}>\r\n                    {movies.map(movie => (\r\n                        <Link key={movie.id}\r\n                            to={{\r\n                                pathname: `${url}/${movie.id}`,\r\n                                state: {\r\n                                    from: {\r\n                                        pathname: location.pathname,\r\n                                        search: query\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            <li className={item}>\r\n                                <p>{movie.name || movie.title}</p>\r\n                                <div className={thumb}>\r\n                                    <img alt=\"Movie cover\" \r\n                                    src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`} />\r\n                                </div>\r\n                            </li>\r\n                        </Link>\r\n                    ))}\r\n                </ul>\r\n            }\r\n\r\n                                        \r\n            {movieId &&\r\n                <Route path={path}>\r\n                    <MovieDetailsPageView/>\r\n                </Route> }                  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MoviesPageView;\r\n\r\n"],"sourceRoot":""}